- Adicionar dois comandos aos scripts no arquivo package.json:

    ```
    "build": "sucrase ./src -d ./dist --transforms imports",
    "start": "node dist/server.js"
    ```
- Instale o babel:

```
yarn add babel-cli babel-plugin-transform-typescript-metadata
```


- Adicione à raiz do projeto o arquivo babel.config.js e adicione o seguinte conteúdo:
```

```

- Abra o tsconfig.js, encontre as configurações "outDir" e "rootDir" e coloque:

```

```

- Agora execute yarn build e node dist/index.js

- Fazer o commit normalmente

- Entrar no site da Digital Ocean:

    cloud.digitalocean.com/login

- Fazer login:

    Login:
    Senha:

- Após entrar com suas credenciais, vá até seu avatar, no canto direito superior, clique e selecione BIPlan

- Agora, no canto direito superior, clique em Create -> Droplets

- Na escolha de imagens vá até Marketplace e escolha Docker

- Escolha o plano básico e o valor de 5 dólares

- Ao escolher a região, escolha Nova Iorque mesmo

- Para gerar senha, use um site para criptografar a senha. Escolha a frase para ser criptografada e guarde-a.

- Quando adicionar no password, você precisará alterar algumas coisas, como colocar alguma letra maiúscula, ou tirar algum caracter especial. Guarde a original e a que vc precisou alterar.

- No hostname coloque um nome que tenha a ver com o produto

    Ex: api-etiquetas-biplan

- Pode dar o create

- Copie o IP que estará na frente do nome que vc acabou de criar

- Entre no terminal pelo ssh

    ssh root@192.241.138.124

- Adicione a senha:

    dcf9ad915f7e70a27547ebc3c3854e7Ad6007423de18d0a8aefc7b6bd777739a

- Agora execute os comandos:

    sudo apt update

    sudo apt upgrade -y

- Enquanto esses comando executam, entre no site da cloudflare e adicione um dominio para o produto

    https://dash.cloudflare.com/login

- Volte até o terminal, instale o node com os comandos abaixo

$ curl -sL https://deb.nodesource.com/setup_12.x | bash -

$ apt-get install -y nodejs


- Execute npm install

- Clone o repositório, entre na pasta.


- Container Mongo

$ docker run --name portalequipe -d -p 27017:27017 -e MONGODB_PASS="" -e MONGODB_DATABASE="portal" tutum/mongodb


- Container Postgres

$ docker run -d -e POSTGRES_USER=-e POSTGRES_PASSWORD= -e POSTGRES_DB=postgres -p 5432:5432 --name equipe postgres:9.6


- Crie o .env com o comando nano .env e coloque o seguinte conteúdo:

    ```
    APP_URL=http://localhost:3333/

    DB_HOST=161.35.61.170
    DB_USER=350c293cf14f3e5b479fa423c304d36
    DB_PASS=4b5d14aaeb91a34ca158e15dfdd810c5d

    ```

- Agora execute ufw allow 3333

- Execute npm install

- Execute npm run build para ver se está tudo rodando certinho

- EXECUTE node dist/index.js

- Para testar, no insomnia substitua o localhost:3333 pelo IP e depois pelo dominio, por exemplo:

    192.241.138.124:3333/products

    api.etiquetas.biplan.com.br:3333/products


- Agora execute 

    $ apt install nginx 
    
    $ cd /etc/nginx/sites-available/

    $ rm default

    $ nano default

- Cole o seguinte conteúdo
    
```
    server {
        server_name api.etiquetas.equiperemota.com.br;


            location / {
                    proxy_pass http://localhost:3333;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
            } 
    }
   

```
Execute:

    $ nginx -t
     
    $ service nginx restart

    $ ufw deny 3333

    $ ufw allow 80

    $ ufw allow 443

    $ ufw allow 8080

- Para que o navegador redirecione de http para https execute:

    $ sudo snap install --classic certbot
    $ sudo ln -s /snap/bin/certbot /usr/bin/certbot
    $ sudo certbot --nginx

A
y
nome da instancia    api.etiquetas.biplan.com.br
1
1


$ service nginx restart

$ node dist/index.js

Dá um ctrl c no terminal

Execute:

próximo passo

$ npm install -g pm2 

$ pm2 start dist/server.js server

$ pm2 startup

Pode fechar o terminal

Entre no site app.buddy.works

Clique para criar um novo projeto

No campo repository, adicione o nome no repository

Add um novo pipeline

Name: deploy

trigger mode: selecione o on push

Branch: single branch -> master

Salve
'
Digite no campo de pesquisa "Digital" e selecione Droplet e clique em Proceed

Selecione o BIPlan e autorize a aplicação

- A página que abrir vamos mudar o Droplet para o servidor que fizemos anteriormente api-etiqeutas-biplan

port continua 22 
login:root 
authentication: password senha criptografada

selecione a pasta que demos git clone no servidor

Depois selecione a segunda opção, vai abrir um mini terminal

execute

git pull
npm install
npm run build
pm2 restart server
Preencha as credenciais

hostname: 192.241.138.124

login: root

password: senha criptografada

Clique para testar
Se deu tudo certo, clique em add this action



